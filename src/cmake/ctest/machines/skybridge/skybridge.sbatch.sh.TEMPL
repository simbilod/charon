#!/bin/bash -x

#SBATCH --nodes=1                   # Number of nodes - all cores per node are allocated to the job
#SBATCH --time=TIMEVAL              # Wall clock time (HH:MM:SS) - once the job exceeds this time, the job will be terminated (default is 5 minutes)
#SBATCH --account=FY140041          # WC ID
#SBATCH --job-name=charon_nt        # Name of job

nodes=$SLURM_JOB_NUM_NODES           # Number of nodes - the number of nodes you have requested (for a list of SLURM environment variables see "man sbatch")
cores=16                             # Number MPI processes to run on each node (a.k.a. PPN)
                                     # TLCC2 has 16 cores per node
export SLURM_TASKS_PER_NODE=${cores}

####################################################
########### BEGIN DEBUG STUFF ######################
# Uncomment and set appropriately for debugging when 
# not running via Jenkins 
##***WORKSPACE=/gpfs1/glhenni/workspace
########### END DEBUG STUFF ########################
####################################################

# Installation directory used during the build process
BLDINSTDIR=${WORKSPACE}/install
BOOSTDIR=${BLDINSTDIR}/boost-1_68_0

# Directory for subsequent jenkins build job to install. This isn't
# used by anything here, it simply embeds the location into the
# makefiles in the final phase of the build. There is no "make
# install" done after that phase in this script though. That is done
# by a separate Jenkins job that runs after the one that submits this
# job.
PROJINSTDIR=/projects/charon/install/skybridge.jenkins

CHARONROOT=${WORKSPACE}/tcad-charon

OPTARG="OPT"
PROC_COUNT=${cores}
BLDSCRIPTARG="-f skybridge.opts"
DONOTUPDATE=TRUE

export TRIBITS_BASE_DIR="${WORKSPACE}/TriBITS"

# /tmp on skybridge seems to be filling up and that causes
# the compiler to crash. Use this instead.
export TMP=${WORKSPACE}/tmp
mkdir -p ${TMP}

# Find out the type of run, eg., heavy, xyce
trilinosUpdate=false
if [[ "${@: -1}" == "TrilinosUpdate" ]]
then
  trilinosUpdate=true
  set -- "${@:1:$(($# - 1))}"
fi
developToMaster=false
if [[ "${@: -1}" == "DevelopToMaster" ]]
then
  developToMaster=true
  set -- "${@:1:$(($# - 1))}"
fi
if [ "$#" -eq "1" ]
then
  if [ "$1" = "heavy" ]
  then
    BLDSCRIPTARG="${BLDSCRIPTARG} --cmake-options=-DENABLE_HEAVY_TESTS:BOOL=ON"
    SITEDESC="skybridge heavy"
    TRACK="Heavy"
    LARG="^heavy$"
  elif [ "$1" = "xyce" ]
  then
    BLDSCRIPTARG="${BLDSCRIPTARG} -f skybridge-with-xyce-tri-libs.opts --cmake-options=-DENABLE_HEAVY_TESTS:BOOL=ON"
    SITEDESC="skybridge xyce coupled heavy"
    TRACK="XyceCoupledHeavy"
    LARG="^xycecoupledheavy$"
  else
    echo "ERROR: Unknown script argument(s)"
    echo "  $*"
    exit 1
  fi
elif [ "$#" -eq "0" ]
then
  SITEDESC="skybridge"
  LARG="nightly"
  TRACK=""
else
  echo "ERROR: Unknown number of arguments to script!"
  exit 1
fi
if ${trilinosUpdate}
then
  SITEDESC="${SITEDESC} TrilinosUpdate"
  TRACK="TrilinosUpdate"
fi
if ${developToMaster}
then
  SITEDESC="${SITEDESC} DevelopToMaster"
  TRACK="DevelopToMaster"
fi

# Set up the build environment
module purge
source /projects/sems/modulefiles/utils/sems-modules-init.sh

MODULE_LIST="intel \
  cmake \
  mkl \
  openmpi-intel/3.0 \
  sems-git"

for mod in ${MODULE_LIST}
do
  module load ${mod}
done

# Clean out the test directory. The ctest_empty_binary_directory()
# cmake function is too cautious to do this and fails often.
if [ -d ${WORKSPACE}/TEST.OPT ]
then
  rm -r ${WORKSPACE}/TEST.OPT
  mkdir ${WORKSPACE}/TEST.OPT
fi
cd ${WORKSPACE}

# For coupled xyce-charon builds
if [ "${TRACK}" = "XyceCoupledHeavy" ]
then

  DONOTUPDATE=TRUE

  # Clean out the install directory. If you don't do this and the xyce
  # build fails, for example, the test may incorrectly complete using
  # the previous install.
  rm -rf ${BLDINSTDIR}
  mkdir -p ${BLDINSTDIR}

  # Build and install boost in the local work space
  cd ${WORKSPACE}/charon-boost
  ./buildBoost.sh INTEL
  cd ${WORKSPACE}

  # Add library path for boost that was installed above
  [[ ":${LD_LIBRARY_PATH}:" != *":${BOOSTDIR}/lib:"* ]] && LD_LIBRARY_PATH="${BOOSTDIR}/lib:${LD_LIBRARY_PATH}"
  export LD_LIBRARY_PATH

  # Build charon with the libraries also required by xyce
  ctest -j${PROC_COUNT} \
        -S ${CHARONROOT}/src/cmake/ctest/machines/ctest_regression.cmake \
        -DDEBUGLEVEL:INT=8 \
        -DTYPE:STRING=${OPTARG} \
        -DTESTTRACK:STRING="${TRACK}" \
        -DDISTRIB:STRING="skybridge" \
        -DCOMPILER:STRING="MPI_INTEL_19.x" \
        -DPROCESSORCOUNT:INT=${PROC_COUNT} \
        -DBASETESTDIR:STRING="${WORKSPACE}" \
        -DBSCRIPTARGS:STRING="${BLDSCRIPTARG}" \
        -DSITEDESC:STRING="${SITEDESC}" \
        -DBUILDONLY:BOOL=TRUE \
        -DINSTALLDIR:STRING="${BLDINSTDIR}" \
        -DDONOTUPDATE:BOOL=${DONOTUPDATE}

  # Install the trilinos libraries from the previous build
  cd ${WORKSPACE}/TEST.OPT
  make -j${PROC_COUNT} install

  # Save the path to reset it later
  OLD_LD_LIBRARY_PATH=${LD_LIBRARY_PATH}

  # Add library path for trilinos libraries that were installed
  # above. Xyce needs this but Charon doesn't so reset it after the
  # Xyce install.
  [[ ":${LD_LIBRARY_PATH}:" != *":${WORKSPACE}/install/lib:"* ]] && LD_LIBRARY_PATH="${WORKSPACE}/install/lib:${LD_LIBRARY_PATH}"
  export LD_LIBRARY_PATH

  # Build and install xyce using the trilinos libraries from the previous build
  cd ${WORKSPACE}/Xyce
  ${WORKSPACE}/tcad-charon/scripts/build/jenkins/xyce-conf-c2.sh
  cd build
  make -j16 install prefix=${BLDINSTDIR}

  # xyce doesn't install all the necessary headers so just copy every header
  # from xyce into the install directory
  cd ${WORKSPACE}/Xyce/src
  find . -follow -name '*.h' -exec cp {} ${BLDINSTDIR}/include \;
  cd ${WORKSPACE}/Xyce/build/src
  find . -follow -name '*.h' -exec cp {} ${BLDINSTDIR}/include \;
  cd ${WORKSPACE}

  # set up for a coupled build
  BLDSCRIPTARG="-f skybridge.opts -f skybridge-with-xyce-tri-libs.opts -f skybridge-xyce-cluster.opts"
  BLDSCRIPTARG="${BLDSCRIPTARG} --cmake-options=-DENABLE_HEAVY_TESTS:BOOL=ON"

  # Reset the install directory to a globally accessible location for
  # general use to be used by a separate jenkins job later. This
  # essentially just embeds the location for that install into the
  # makefiles. It's not actually used here since there is no "make
  # install" after the final phase of the build.
  BLDINSTDIR=${PROJINSTDIR}

  # Clean up build directory for next phase of testing
  cd ${WORKSPACE}
  rm -rf TEST.OPT
  mkdir -p TEST.OPT

  # Reset the library path and re-add the boost library path. If you
  # don't do this the charon-xyce build below will try to use the
  # lib*.so trilinos libraries from the non-cluster build above and
  # fail, but it does need the boost libraries
  export LD_LIBRARY_PATH=${OLD_LD_LIBRARY_PATH}

fi

EXTRAOPTS=""
if [ "x${OPTARG}" = "xDBG" ]
then
  EXTRAOPTS="-LE debugexclude"
fi

# Make sure the group, wg-charon-developers, has
# full access t everything created.
umask 007

# For debugging
###EXTRAOPTS="${EXTRAOPTS} -VV"

ctest -L ${LARG} ${EXTRAOPTS} -j${PROC_COUNT} \
      -S ${CHARONROOT}/src/cmake/ctest/machines/ctest_regression.cmake \
           -DDEBUGLEVEL:INT=8 \
           -DTYPE:STRING=${OPTARG} \
           -DTESTTRACK:STRING="${TRACK}" \
           -DDISTRIB:STRING="skybridge" \
           -DCOMPILER:STRING="MPI_INTEL_19.x" \
           -DPROCESSORCOUNT:INT=${PROC_COUNT} \
           -DBASETESTDIR:STRING="${WORKSPACE}" \
           -DBSCRIPTARGS:STRING="${BLDSCRIPTARG}" \
           -DSITEDESC:STRING="${SITEDESC}" \
           -DINSTALLDIR:STRING="${BLDINSTDIR}" \
           -DDONOTUPDATE:BOOL=${DONOTUPDATE}
