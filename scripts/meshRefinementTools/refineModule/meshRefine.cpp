/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "refine_external.hpp"
        ],
        "language": "c++"
    },
    "module_name": "meshRefine"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__meshRefine
#define __PYX_HAVE_API__meshRefine
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <string>
#include "refine_external.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "meshRefine.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_10meshRefine_PyMeshRefine;

/* "meshRefine.pyx":67
 * 
 * 
 * cdef class PyMeshRefine:             # <<<<<<<<<<<<<<
 *      cdef meshRefine *thisptr
 *      def __cinit__(self):
 */
struct __pyx_obj_10meshRefine_PyMeshRefine {
  PyObject_HEAD
  meshRefine *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'meshRefine' */
static PyTypeObject *__pyx_ptype_10meshRefine_PyMeshRefine = 0;
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "meshRefine"
int __pyx_module_is_main_meshRefine = 0;

/* Implementation of 'meshRefine' */
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_x3[] = "x3";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_y3[] = "y3";
static const char __pyx_k_z0[] = "z0";
static const char __pyx_k_z1[] = "z1";
static const char __pyx_k_z2[] = "z2";
static const char __pyx_k_z3[] = "z3";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_xmax[] = "xmax";
static const char __pyx_k_xmin[] = "xmin";
static const char __pyx_k_ymax[] = "ymax";
static const char __pyx_k_ymin[] = "ymin";
static const char __pyx_k_zmax[] = "zmax";
static const char __pyx_k_zmin[] = "zmin";
static const char __pyx_k_xwidth[] = "xwidth";
static const char __pyx_k_ywidth[] = "ywidth";
static const char __pyx_k_zwidth[] = "zwidth";
static const char __pyx_k_ilThick[] = "ilThick";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_dopingType[] = "dopingType";
static const char __pyx_k_functionType[] = "functionType";
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_dopingType;
static PyObject *__pyx_n_s_functionType;
static PyObject *__pyx_n_s_ilThick;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_x3;
static PyObject *__pyx_n_s_xmax;
static PyObject *__pyx_n_s_xmin;
static PyObject *__pyx_n_s_xwidth;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_y3;
static PyObject *__pyx_n_s_ymax;
static PyObject *__pyx_n_s_ymin;
static PyObject *__pyx_n_s_ywidth;
static PyObject *__pyx_n_s_z0;
static PyObject *__pyx_n_s_z1;
static PyObject *__pyx_n_s_z2;
static PyObject *__pyx_n_s_z3;
static PyObject *__pyx_n_s_zmax;
static PyObject *__pyx_n_s_zmin;
static PyObject *__pyx_n_s_zwidth;
static int __pyx_pf_10meshRefine_12PyMeshRefine___cinit__(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static void __pyx_pf_10meshRefine_12PyMeshRefine_2__dealloc__(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_4fillCoordinates(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_6helloWorld(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_8init(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_flag3D); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_10printSurfs(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_12testX(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_14printTestX(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_16sizeCellNodes(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_numCellNodes_); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_18resetNodeCounter(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_20printCoords(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_22freeCoords(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_24setRefinementDistance(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_26setRefinementDistanceN(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_28setRefinementDistanceP(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_30setRefinementDistanceIL(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_32getRefinementDistance(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_34doIRefine(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_36doIrefineXplane(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_x); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_38doIrefineCentroid(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_40doIrefineCentroidSided(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_42doIrefine3D(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_44doIrefine2D(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_46doIrefineCentroidSidedFinishMetric(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_48getNumSurfs(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_50getMaxSide(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_52getMinSide(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_54setCellMinimum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_56setCellMinimumN(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_58setCellMinimumP(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_60setCellMinimumIL(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_62setDimension(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_64setRefinementFactor(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_rF); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_66getDimension(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_68readSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_filename); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_70setSizeMeasure(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_sM); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_72createSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_74journalSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_76setDopingFunction(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_functionType, std::string __pyx_v_dopingType); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_78setXBounds(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_axis, double __pyx_v_min, double __pyx_v_max); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_80setDopingBounds(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_min, double __pyx_v_max); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_82setDirection(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_direction); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_84listFunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_86printXMLDopingFunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_88setDopingWidth(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_xwidth, double __pyx_v_ywidth, double __pyx_v_zwidth); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_90setDopingLocation(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_xwidth, double __pyx_v_ywidth, double __pyx_v_zwidth); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_92addRefineToLine(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_ymin, double __pyx_v_xmax, double __pyx_v_ymax, double __pyx_v_ilThick); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_94addRefineToSurface(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2, double __pyx_v_x3, double __pyx_v_y3, double __pyx_v_z3, double __pyx_v_ilThick); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_96setRefinementBoundingBox(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_ymin, double __pyx_v_zmin, double __pyx_v_xmax, double __pyx_v_ymax, double __pyx_v_zmax); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_98setMaxSurfaceRecursions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_level); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_100setGuaranteedSurfaceRecursions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_level); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_102setWriteJunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, bool __pyx_v_setJunctions); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_104setTetNum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_tn); /* proto */
static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_106getTetNum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_10meshRefine_PyMeshRefine(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/

/* "meshRefine.pyx":69
 * cdef class PyMeshRefine:
 *      cdef meshRefine *thisptr
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *          self.thisptr = new meshRefine()
 *      def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_10meshRefine_12PyMeshRefine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10meshRefine_12PyMeshRefine_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine___cinit__(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10meshRefine_12PyMeshRefine___cinit__(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "meshRefine.pyx":70
 *      cdef meshRefine *thisptr
 *      def __cinit__(self):
 *          self.thisptr = new meshRefine()             # <<<<<<<<<<<<<<
 *      def __dealloc__(self):
 *          del self.thisptr
 */
  __pyx_v_self->thisptr = new meshRefine();

  /* "meshRefine.pyx":69
 * cdef class PyMeshRefine:
 *      cdef meshRefine *thisptr
 *      def __cinit__(self):             # <<<<<<<<<<<<<<
 *          self.thisptr = new meshRefine()
 *      def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":71
 *      def __cinit__(self):
 *          self.thisptr = new meshRefine()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          del self.thisptr
 *      def fillCoordinates(self, vector[double] x):
 */

/* Python wrapper */
static void __pyx_pw_10meshRefine_12PyMeshRefine_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10meshRefine_12PyMeshRefine_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10meshRefine_12PyMeshRefine_2__dealloc__(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10meshRefine_12PyMeshRefine_2__dealloc__(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "meshRefine.pyx":72
 *          self.thisptr = new meshRefine()
 *      def __dealloc__(self):
 *          del self.thisptr             # <<<<<<<<<<<<<<
 *      def fillCoordinates(self, vector[double] x):
 *          return self.thisptr.fillCoordinates(x)
 */
  delete __pyx_v_self->thisptr;

  /* "meshRefine.pyx":71
 *      def __cinit__(self):
 *          self.thisptr = new meshRefine()
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          del self.thisptr
 *      def fillCoordinates(self, vector[double] x):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "meshRefine.pyx":73
 *      def __dealloc__(self):
 *          del self.thisptr
 *      def fillCoordinates(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.fillCoordinates(x)
 *      def helloWorld(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_5fillCoordinates(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_5fillCoordinates(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  std::vector<double>  __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fillCoordinates (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_convert_vector_from_py_double(__pyx_arg_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.fillCoordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_4fillCoordinates(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((std::vector<double> )__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_4fillCoordinates(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fillCoordinates", 0);

  /* "meshRefine.pyx":74
 *          del self.thisptr
 *      def fillCoordinates(self, vector[double] x):
 *          return self.thisptr.fillCoordinates(x)             # <<<<<<<<<<<<<<
 *      def helloWorld(self):
 *          return self.thisptr.helloWorld()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->fillCoordinates(__pyx_v_x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":73
 *      def __dealloc__(self):
 *          del self.thisptr
 *      def fillCoordinates(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.fillCoordinates(x)
 *      def helloWorld(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.fillCoordinates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":75
 *      def fillCoordinates(self, vector[double] x):
 *          return self.thisptr.fillCoordinates(x)
 *      def helloWorld(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.helloWorld()
 *      def init(self, int flag3D):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_7helloWorld(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_7helloWorld(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("helloWorld (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_6helloWorld(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_6helloWorld(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("helloWorld", 0);

  /* "meshRefine.pyx":76
 *          return self.thisptr.fillCoordinates(x)
 *      def helloWorld(self):
 *          return self.thisptr.helloWorld()             # <<<<<<<<<<<<<<
 *      def init(self, int flag3D):
 *          return self.thisptr.init(flag3D)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->helloWorld()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":75
 *      def fillCoordinates(self, vector[double] x):
 *          return self.thisptr.fillCoordinates(x)
 *      def helloWorld(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.helloWorld()
 *      def init(self, int flag3D):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.helloWorld", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":77
 *      def helloWorld(self):
 *          return self.thisptr.helloWorld()
 *      def init(self, int flag3D):             # <<<<<<<<<<<<<<
 *          return self.thisptr.init(flag3D)
 *      def printSurfs(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_9init(PyObject *__pyx_v_self, PyObject *__pyx_arg_flag3D); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_9init(PyObject *__pyx_v_self, PyObject *__pyx_arg_flag3D) {
  int __pyx_v_flag3D;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  assert(__pyx_arg_flag3D); {
    __pyx_v_flag3D = __Pyx_PyInt_As_int(__pyx_arg_flag3D); if (unlikely((__pyx_v_flag3D == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_8init(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_flag3D));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_8init(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_flag3D) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("init", 0);

  /* "meshRefine.pyx":78
 *          return self.thisptr.helloWorld()
 *      def init(self, int flag3D):
 *          return self.thisptr.init(flag3D)             # <<<<<<<<<<<<<<
 *      def printSurfs(self):
 *          return self.thisptr.printSurfs()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->init(__pyx_v_flag3D)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":77
 *      def helloWorld(self):
 *          return self.thisptr.helloWorld()
 *      def init(self, int flag3D):             # <<<<<<<<<<<<<<
 *          return self.thisptr.init(flag3D)
 *      def printSurfs(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":79
 *      def init(self, int flag3D):
 *          return self.thisptr.init(flag3D)
 *      def printSurfs(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printSurfs()
 *      def testX(self, vector[double] x):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_11printSurfs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_11printSurfs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printSurfs (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_10printSurfs(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_10printSurfs(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("printSurfs", 0);

  /* "meshRefine.pyx":80
 *          return self.thisptr.init(flag3D)
 *      def printSurfs(self):
 *          return self.thisptr.printSurfs()             # <<<<<<<<<<<<<<
 *      def testX(self, vector[double] x):
 *          return self.thisptr.testX(x)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->printSurfs()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":79
 *      def init(self, int flag3D):
 *          return self.thisptr.init(flag3D)
 *      def printSurfs(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printSurfs()
 *      def testX(self, vector[double] x):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.printSurfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":81
 *      def printSurfs(self):
 *          return self.thisptr.printSurfs()
 *      def testX(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.testX(x)
 *      def printTestX(self, vector[double] x):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_13testX(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_13testX(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  std::vector<double>  __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testX (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_convert_vector_from_py_double(__pyx_arg_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.testX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_12testX(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((std::vector<double> )__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_12testX(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("testX", 0);

  /* "meshRefine.pyx":82
 *          return self.thisptr.printSurfs()
 *      def testX(self, vector[double] x):
 *          return self.thisptr.testX(x)             # <<<<<<<<<<<<<<
 *      def printTestX(self, vector[double] x):
 *          return self.thisptr.printTestX(x)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->testX(__pyx_v_x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":81
 *      def printSurfs(self):
 *          return self.thisptr.printSurfs()
 *      def testX(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.testX(x)
 *      def printTestX(self, vector[double] x):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.testX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":83
 *      def testX(self, vector[double] x):
 *          return self.thisptr.testX(x)
 *      def printTestX(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printTestX(x)
 *      def sizeCellNodes(self, int numCellNodes_):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_15printTestX(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_15printTestX(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  std::vector<double>  __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printTestX (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_convert_vector_from_py_double(__pyx_arg_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.printTestX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_14printTestX(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((std::vector<double> )__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_14printTestX(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::vector<double>  __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("printTestX", 0);

  /* "meshRefine.pyx":84
 *          return self.thisptr.testX(x)
 *      def printTestX(self, vector[double] x):
 *          return self.thisptr.printTestX(x)             # <<<<<<<<<<<<<<
 *      def sizeCellNodes(self, int numCellNodes_):
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->printTestX(__pyx_v_x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":83
 *      def testX(self, vector[double] x):
 *          return self.thisptr.testX(x)
 *      def printTestX(self, vector[double] x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printTestX(x)
 *      def sizeCellNodes(self, int numCellNodes_):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.printTestX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":85
 *      def printTestX(self, vector[double] x):
 *          return self.thisptr.printTestX(x)
 *      def sizeCellNodes(self, int numCellNodes_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 *      def resetNodeCounter(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_17sizeCellNodes(PyObject *__pyx_v_self, PyObject *__pyx_arg_numCellNodes_); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_17sizeCellNodes(PyObject *__pyx_v_self, PyObject *__pyx_arg_numCellNodes_) {
  int __pyx_v_numCellNodes_;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sizeCellNodes (wrapper)", 0);
  assert(__pyx_arg_numCellNodes_); {
    __pyx_v_numCellNodes_ = __Pyx_PyInt_As_int(__pyx_arg_numCellNodes_); if (unlikely((__pyx_v_numCellNodes_ == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.sizeCellNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_16sizeCellNodes(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_numCellNodes_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_16sizeCellNodes(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_numCellNodes_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("sizeCellNodes", 0);

  /* "meshRefine.pyx":86
 *          return self.thisptr.printTestX(x)
 *      def sizeCellNodes(self, int numCellNodes_):
 *          return self.thisptr.sizeCellNodes(numCellNodes_)             # <<<<<<<<<<<<<<
 *      def resetNodeCounter(self):
 *          return self.thisptr.resetNodeCounter()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->sizeCellNodes(__pyx_v_numCellNodes_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":85
 *      def printTestX(self, vector[double] x):
 *          return self.thisptr.printTestX(x)
 *      def sizeCellNodes(self, int numCellNodes_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 *      def resetNodeCounter(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.sizeCellNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":87
 *      def sizeCellNodes(self, int numCellNodes_):
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 *      def resetNodeCounter(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.resetNodeCounter()
 *      def printCoords(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_19resetNodeCounter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_19resetNodeCounter(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetNodeCounter (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_18resetNodeCounter(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_18resetNodeCounter(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("resetNodeCounter", 0);

  /* "meshRefine.pyx":88
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 *      def resetNodeCounter(self):
 *          return self.thisptr.resetNodeCounter()             # <<<<<<<<<<<<<<
 *      def printCoords(self):
 *          return self.thisptr.printCoords()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->resetNodeCounter()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":87
 *      def sizeCellNodes(self, int numCellNodes_):
 *          return self.thisptr.sizeCellNodes(numCellNodes_)
 *      def resetNodeCounter(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.resetNodeCounter()
 *      def printCoords(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.resetNodeCounter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":89
 *      def resetNodeCounter(self):
 *          return self.thisptr.resetNodeCounter()
 *      def printCoords(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printCoords()
 *      def freeCoords(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_21printCoords(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_21printCoords(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printCoords (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_20printCoords(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_20printCoords(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("printCoords", 0);

  /* "meshRefine.pyx":90
 *          return self.thisptr.resetNodeCounter()
 *      def printCoords(self):
 *          return self.thisptr.printCoords()             # <<<<<<<<<<<<<<
 *      def freeCoords(self):
 *          return self.thisptr.freeCoords()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->printCoords()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":89
 *      def resetNodeCounter(self):
 *          return self.thisptr.resetNodeCounter()
 *      def printCoords(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printCoords()
 *      def freeCoords(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.printCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":91
 *      def printCoords(self):
 *          return self.thisptr.printCoords()
 *      def freeCoords(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.freeCoords()
 *      def setRefinementDistance(self, double dist_):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_23freeCoords(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_23freeCoords(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freeCoords (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_22freeCoords(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_22freeCoords(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("freeCoords", 0);

  /* "meshRefine.pyx":92
 *          return self.thisptr.printCoords()
 *      def freeCoords(self):
 *          return self.thisptr.freeCoords()             # <<<<<<<<<<<<<<
 *      def setRefinementDistance(self, double dist_):
 *          return self.thisptr.setRefinementDistance(dist_)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->freeCoords()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":91
 *      def printCoords(self):
 *          return self.thisptr.printCoords()
 *      def freeCoords(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.freeCoords()
 *      def setRefinementDistance(self, double dist_):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.freeCoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":93
 *      def freeCoords(self):
 *          return self.thisptr.freeCoords()
 *      def setRefinementDistance(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistance(dist_)
 *      def setRefinementDistanceN(self, double dist_):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_25setRefinementDistance(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_25setRefinementDistance(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_) {
  double __pyx_v_dist_;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementDistance (wrapper)", 0);
  assert(__pyx_arg_dist_); {
    __pyx_v_dist_ = __pyx_PyFloat_AsDouble(__pyx_arg_dist_); if (unlikely((__pyx_v_dist_ == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_24setRefinementDistance(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_dist_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_24setRefinementDistance(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementDistance", 0);

  /* "meshRefine.pyx":94
 *          return self.thisptr.freeCoords()
 *      def setRefinementDistance(self, double dist_):
 *          return self.thisptr.setRefinementDistance(dist_)             # <<<<<<<<<<<<<<
 *      def setRefinementDistanceN(self, double dist_):
 *          return self.thisptr.setRefinementDistanceN(dist_)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementDistance(__pyx_v_dist_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":93
 *      def freeCoords(self):
 *          return self.thisptr.freeCoords()
 *      def setRefinementDistance(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistance(dist_)
 *      def setRefinementDistanceN(self, double dist_):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":95
 *      def setRefinementDistance(self, double dist_):
 *          return self.thisptr.setRefinementDistance(dist_)
 *      def setRefinementDistanceN(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceN(dist_)
 *      def setRefinementDistanceP(self, double dist_):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_27setRefinementDistanceN(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_27setRefinementDistanceN(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_) {
  double __pyx_v_dist_;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementDistanceN (wrapper)", 0);
  assert(__pyx_arg_dist_); {
    __pyx_v_dist_ = __pyx_PyFloat_AsDouble(__pyx_arg_dist_); if (unlikely((__pyx_v_dist_ == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_26setRefinementDistanceN(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_dist_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_26setRefinementDistanceN(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementDistanceN", 0);

  /* "meshRefine.pyx":96
 *          return self.thisptr.setRefinementDistance(dist_)
 *      def setRefinementDistanceN(self, double dist_):
 *          return self.thisptr.setRefinementDistanceN(dist_)             # <<<<<<<<<<<<<<
 *      def setRefinementDistanceP(self, double dist_):
 *          return self.thisptr.setRefinementDistanceP(dist_)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementDistanceN(__pyx_v_dist_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":95
 *      def setRefinementDistance(self, double dist_):
 *          return self.thisptr.setRefinementDistance(dist_)
 *      def setRefinementDistanceN(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceN(dist_)
 *      def setRefinementDistanceP(self, double dist_):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":97
 *      def setRefinementDistanceN(self, double dist_):
 *          return self.thisptr.setRefinementDistanceN(dist_)
 *      def setRefinementDistanceP(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceP(dist_)
 *      def setRefinementDistanceIL(self, double dist_):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_29setRefinementDistanceP(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_29setRefinementDistanceP(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_) {
  double __pyx_v_dist_;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementDistanceP (wrapper)", 0);
  assert(__pyx_arg_dist_); {
    __pyx_v_dist_ = __pyx_PyFloat_AsDouble(__pyx_arg_dist_); if (unlikely((__pyx_v_dist_ == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_28setRefinementDistanceP(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_dist_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_28setRefinementDistanceP(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementDistanceP", 0);

  /* "meshRefine.pyx":98
 *          return self.thisptr.setRefinementDistanceN(dist_)
 *      def setRefinementDistanceP(self, double dist_):
 *          return self.thisptr.setRefinementDistanceP(dist_)             # <<<<<<<<<<<<<<
 *      def setRefinementDistanceIL(self, double dist_):
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementDistanceP(__pyx_v_dist_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":97
 *      def setRefinementDistanceN(self, double dist_):
 *          return self.thisptr.setRefinementDistanceN(dist_)
 *      def setRefinementDistanceP(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceP(dist_)
 *      def setRefinementDistanceIL(self, double dist_):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":99
 *      def setRefinementDistanceP(self, double dist_):
 *          return self.thisptr.setRefinementDistanceP(dist_)
 *      def setRefinementDistanceIL(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 *      def getRefinementDistance(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_31setRefinementDistanceIL(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_31setRefinementDistanceIL(PyObject *__pyx_v_self, PyObject *__pyx_arg_dist_) {
  double __pyx_v_dist_;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementDistanceIL (wrapper)", 0);
  assert(__pyx_arg_dist_); {
    __pyx_v_dist_ = __pyx_PyFloat_AsDouble(__pyx_arg_dist_); if (unlikely((__pyx_v_dist_ == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 99, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceIL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_30setRefinementDistanceIL(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_dist_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_30setRefinementDistanceIL(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_dist_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementDistanceIL", 0);

  /* "meshRefine.pyx":100
 *          return self.thisptr.setRefinementDistanceP(dist_)
 *      def setRefinementDistanceIL(self, double dist_):
 *          return self.thisptr.setRefinementDistanceIL(dist_)             # <<<<<<<<<<<<<<
 *      def getRefinementDistance(self):
 *          return self.thisptr.getRefinementDistance()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementDistanceIL(__pyx_v_dist_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":99
 *      def setRefinementDistanceP(self, double dist_):
 *          return self.thisptr.setRefinementDistanceP(dist_)
 *      def setRefinementDistanceIL(self, double dist_):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 *      def getRefinementDistance(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementDistanceIL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":101
 *      def setRefinementDistanceIL(self, double dist_):
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 *      def getRefinementDistance(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getRefinementDistance()
 *      def doIRefine(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_33getRefinementDistance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_33getRefinementDistance(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRefinementDistance (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_32getRefinementDistance(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_32getRefinementDistance(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getRefinementDistance", 0);

  /* "meshRefine.pyx":102
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 *      def getRefinementDistance(self):
 *          return self.thisptr.getRefinementDistance()             # <<<<<<<<<<<<<<
 *      def doIRefine(self):
 *          return self.thisptr.doIRefine()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getRefinementDistance()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":101
 *      def setRefinementDistanceIL(self, double dist_):
 *          return self.thisptr.setRefinementDistanceIL(dist_)
 *      def getRefinementDistance(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getRefinementDistance()
 *      def doIRefine(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getRefinementDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":103
 *      def getRefinementDistance(self):
 *          return self.thisptr.getRefinementDistance()
 *      def doIRefine(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIRefine()
 *      def doIrefineXplane(self, double x):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_35doIRefine(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_35doIRefine(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIRefine (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_34doIRefine(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_34doIRefine(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIRefine", 0);

  /* "meshRefine.pyx":104
 *          return self.thisptr.getRefinementDistance()
 *      def doIRefine(self):
 *          return self.thisptr.doIRefine()             # <<<<<<<<<<<<<<
 *      def doIrefineXplane(self, double x):
 *          return self.thisptr.doIrefineXplane(x)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIRefine()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":103
 *      def getRefinementDistance(self):
 *          return self.thisptr.getRefinementDistance()
 *      def doIRefine(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIRefine()
 *      def doIrefineXplane(self, double x):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIRefine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":105
 *      def doIRefine(self):
 *          return self.thisptr.doIRefine()
 *      def doIrefineXplane(self, double x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineXplane(x)
 *      def doIrefineCentroid(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_37doIrefineXplane(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_37doIrefineXplane(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  double __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefineXplane (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsDouble(__pyx_arg_x); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefineXplane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_36doIrefineXplane(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_36doIrefineXplane(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefineXplane", 0);

  /* "meshRefine.pyx":106
 *          return self.thisptr.doIRefine()
 *      def doIrefineXplane(self, double x):
 *          return self.thisptr.doIrefineXplane(x)             # <<<<<<<<<<<<<<
 *      def doIrefineCentroid(self):
 *          return self.thisptr.doIrefineCentroid()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIrefineXplane(__pyx_v_x)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":105
 *      def doIRefine(self):
 *          return self.thisptr.doIRefine()
 *      def doIrefineXplane(self, double x):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineXplane(x)
 *      def doIrefineCentroid(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefineXplane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":107
 *      def doIrefineXplane(self, double x):
 *          return self.thisptr.doIrefineXplane(x)
 *      def doIrefineCentroid(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroid()
 *      def doIrefineCentroidSided(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_39doIrefineCentroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_39doIrefineCentroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefineCentroid (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_38doIrefineCentroid(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_38doIrefineCentroid(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefineCentroid", 0);

  /* "meshRefine.pyx":108
 *          return self.thisptr.doIrefineXplane(x)
 *      def doIrefineCentroid(self):
 *          return self.thisptr.doIrefineCentroid()             # <<<<<<<<<<<<<<
 *      def doIrefineCentroidSided(self):
 *          return self.thisptr.doIrefineCentroidSided()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIrefineCentroid()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":107
 *      def doIrefineXplane(self, double x):
 *          return self.thisptr.doIrefineXplane(x)
 *      def doIrefineCentroid(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroid()
 *      def doIrefineCentroidSided(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefineCentroid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":109
 *      def doIrefineCentroid(self):
 *          return self.thisptr.doIrefineCentroid()
 *      def doIrefineCentroidSided(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroidSided()
 *      def doIrefine3D(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_41doIrefineCentroidSided(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_41doIrefineCentroidSided(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefineCentroidSided (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_40doIrefineCentroidSided(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_40doIrefineCentroidSided(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefineCentroidSided", 0);

  /* "meshRefine.pyx":110
 *          return self.thisptr.doIrefineCentroid()
 *      def doIrefineCentroidSided(self):
 *          return self.thisptr.doIrefineCentroidSided()             # <<<<<<<<<<<<<<
 *      def doIrefine3D(self):
 *          return self.thisptr.doIrefine3D()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIrefineCentroidSided()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":109
 *      def doIrefineCentroid(self):
 *          return self.thisptr.doIrefineCentroid()
 *      def doIrefineCentroidSided(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroidSided()
 *      def doIrefine3D(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefineCentroidSided", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":111
 *      def doIrefineCentroidSided(self):
 *          return self.thisptr.doIrefineCentroidSided()
 *      def doIrefine3D(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefine3D()
 *      def doIrefine2D(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_43doIrefine3D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_43doIrefine3D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefine3D (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_42doIrefine3D(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_42doIrefine3D(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefine3D", 0);

  /* "meshRefine.pyx":112
 *          return self.thisptr.doIrefineCentroidSided()
 *      def doIrefine3D(self):
 *          return self.thisptr.doIrefine3D()             # <<<<<<<<<<<<<<
 *      def doIrefine2D(self):
 *          return self.thisptr.doIrefine2D()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIrefine3D()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":111
 *      def doIrefineCentroidSided(self):
 *          return self.thisptr.doIrefineCentroidSided()
 *      def doIrefine3D(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefine3D()
 *      def doIrefine2D(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefine3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":113
 *      def doIrefine3D(self):
 *          return self.thisptr.doIrefine3D()
 *      def doIrefine2D(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefine2D()
 *      def doIrefineCentroidSidedFinishMetric(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_45doIrefine2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_45doIrefine2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefine2D (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_44doIrefine2D(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_44doIrefine2D(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefine2D", 0);

  /* "meshRefine.pyx":114
 *          return self.thisptr.doIrefine3D()
 *      def doIrefine2D(self):
 *          return self.thisptr.doIrefine2D()             # <<<<<<<<<<<<<<
 *      def doIrefineCentroidSidedFinishMetric(self):
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->doIrefine2D()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":113
 *      def doIrefine3D(self):
 *          return self.thisptr.doIrefine3D()
 *      def doIrefine2D(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefine2D()
 *      def doIrefineCentroidSidedFinishMetric(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefine2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":115
 *      def doIrefine2D(self):
 *          return self.thisptr.doIrefine2D()
 *      def doIrefineCentroidSidedFinishMetric(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 *      def getNumSurfs(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_47doIrefineCentroidSidedFinishMetric(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_47doIrefineCentroidSidedFinishMetric(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("doIrefineCentroidSidedFinishMetric (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_46doIrefineCentroidSidedFinishMetric(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_46doIrefineCentroidSidedFinishMetric(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("doIrefineCentroidSidedFinishMetric", 0);

  /* "meshRefine.pyx":116
 *          return self.thisptr.doIrefine2D()
 *      def doIrefineCentroidSidedFinishMetric(self):
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()             # <<<<<<<<<<<<<<
 *      def getNumSurfs(self):
 *          return self.thisptr.getNumSurfs()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->doIrefineCentroidSidedFinishMetric()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":115
 *      def doIrefine2D(self):
 *          return self.thisptr.doIrefine2D()
 *      def doIrefineCentroidSidedFinishMetric(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 *      def getNumSurfs(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.doIrefineCentroidSidedFinishMetric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":117
 *      def doIrefineCentroidSidedFinishMetric(self):
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 *      def getNumSurfs(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getNumSurfs()
 *      def getMaxSide(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_49getNumSurfs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_49getNumSurfs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumSurfs (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_48getNumSurfs(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_48getNumSurfs(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumSurfs", 0);

  /* "meshRefine.pyx":118
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 *      def getNumSurfs(self):
 *          return self.thisptr.getNumSurfs()             # <<<<<<<<<<<<<<
 *      def getMaxSide(self):
 *          return self.thisptr.getMaxSide()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getNumSurfs()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":117
 *      def doIrefineCentroidSidedFinishMetric(self):
 *          return self.thisptr.doIrefineCentroidSidedFinishMetric()
 *      def getNumSurfs(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getNumSurfs()
 *      def getMaxSide(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getNumSurfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":119
 *      def getNumSurfs(self):
 *          return self.thisptr.getNumSurfs()
 *      def getMaxSide(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getMaxSide()
 *      def getMinSide(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_51getMaxSide(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_51getMaxSide(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaxSide (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_50getMaxSide(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_50getMaxSide(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getMaxSide", 0);

  /* "meshRefine.pyx":120
 *          return self.thisptr.getNumSurfs()
 *      def getMaxSide(self):
 *          return self.thisptr.getMaxSide()             # <<<<<<<<<<<<<<
 *      def getMinSide(self):
 *          return self.thisptr.getMinSide()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getMaxSide()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":119
 *      def getNumSurfs(self):
 *          return self.thisptr.getNumSurfs()
 *      def getMaxSide(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getMaxSide()
 *      def getMinSide(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getMaxSide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":121
 *      def getMaxSide(self):
 *          return self.thisptr.getMaxSide()
 *      def getMinSide(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getMinSide()
 *      def setCellMinimum(self, double min):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_53getMinSide(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_53getMinSide(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMinSide (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_52getMinSide(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_52getMinSide(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getMinSide", 0);

  /* "meshRefine.pyx":122
 *          return self.thisptr.getMaxSide()
 *      def getMinSide(self):
 *          return self.thisptr.getMinSide()             # <<<<<<<<<<<<<<
 *      def setCellMinimum(self, double min):
 *          return self.thisptr.setCellMinimum(min)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getMinSide()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":121
 *      def getMaxSide(self):
 *          return self.thisptr.getMaxSide()
 *      def getMinSide(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getMinSide()
 *      def setCellMinimum(self, double min):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getMinSide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":123
 *      def getMinSide(self):
 *          return self.thisptr.getMinSide()
 *      def setCellMinimum(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimum(min)
 *      def setCellMinimumN(self, double min):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_55setCellMinimum(PyObject *__pyx_v_self, PyObject *__pyx_arg_min); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_55setCellMinimum(PyObject *__pyx_v_self, PyObject *__pyx_arg_min) {
  double __pyx_v_min;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCellMinimum (wrapper)", 0);
  assert(__pyx_arg_min); {
    __pyx_v_min = __pyx_PyFloat_AsDouble(__pyx_arg_min); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_54setCellMinimum(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_min));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_54setCellMinimum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setCellMinimum", 0);

  /* "meshRefine.pyx":124
 *          return self.thisptr.getMinSide()
 *      def setCellMinimum(self, double min):
 *          return self.thisptr.setCellMinimum(min)             # <<<<<<<<<<<<<<
 *      def setCellMinimumN(self, double min):
 *          return self.thisptr.setCellMinimumN(min)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setCellMinimum(__pyx_v_min)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":123
 *      def getMinSide(self):
 *          return self.thisptr.getMinSide()
 *      def setCellMinimum(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimum(min)
 *      def setCellMinimumN(self, double min):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":125
 *      def setCellMinimum(self, double min):
 *          return self.thisptr.setCellMinimum(min)
 *      def setCellMinimumN(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumN(min)
 *      def setCellMinimumP(self, double min):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_57setCellMinimumN(PyObject *__pyx_v_self, PyObject *__pyx_arg_min); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_57setCellMinimumN(PyObject *__pyx_v_self, PyObject *__pyx_arg_min) {
  double __pyx_v_min;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCellMinimumN (wrapper)", 0);
  assert(__pyx_arg_min); {
    __pyx_v_min = __pyx_PyFloat_AsDouble(__pyx_arg_min); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 125, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_56setCellMinimumN(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_min));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_56setCellMinimumN(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setCellMinimumN", 0);

  /* "meshRefine.pyx":126
 *          return self.thisptr.setCellMinimum(min)
 *      def setCellMinimumN(self, double min):
 *          return self.thisptr.setCellMinimumN(min)             # <<<<<<<<<<<<<<
 *      def setCellMinimumP(self, double min):
 *          return self.thisptr.setCellMinimumP(min)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setCellMinimumN(__pyx_v_min)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":125
 *      def setCellMinimum(self, double min):
 *          return self.thisptr.setCellMinimum(min)
 *      def setCellMinimumN(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumN(min)
 *      def setCellMinimumP(self, double min):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumN", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":127
 *      def setCellMinimumN(self, double min):
 *          return self.thisptr.setCellMinimumN(min)
 *      def setCellMinimumP(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumP(min)
 *      def setCellMinimumIL(self, double min):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_59setCellMinimumP(PyObject *__pyx_v_self, PyObject *__pyx_arg_min); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_59setCellMinimumP(PyObject *__pyx_v_self, PyObject *__pyx_arg_min) {
  double __pyx_v_min;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCellMinimumP (wrapper)", 0);
  assert(__pyx_arg_min); {
    __pyx_v_min = __pyx_PyFloat_AsDouble(__pyx_arg_min); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_58setCellMinimumP(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_min));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_58setCellMinimumP(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setCellMinimumP", 0);

  /* "meshRefine.pyx":128
 *          return self.thisptr.setCellMinimumN(min)
 *      def setCellMinimumP(self, double min):
 *          return self.thisptr.setCellMinimumP(min)             # <<<<<<<<<<<<<<
 *      def setCellMinimumIL(self, double min):
 *          return self.thisptr.setCellMinimumIL(min)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setCellMinimumP(__pyx_v_min)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":127
 *      def setCellMinimumN(self, double min):
 *          return self.thisptr.setCellMinimumN(min)
 *      def setCellMinimumP(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumP(min)
 *      def setCellMinimumIL(self, double min):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumP", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":129
 *      def setCellMinimumP(self, double min):
 *          return self.thisptr.setCellMinimumP(min)
 *      def setCellMinimumIL(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumIL(min)
 *      def setDimension(self, int dim):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_61setCellMinimumIL(PyObject *__pyx_v_self, PyObject *__pyx_arg_min); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_61setCellMinimumIL(PyObject *__pyx_v_self, PyObject *__pyx_arg_min) {
  double __pyx_v_min;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setCellMinimumIL (wrapper)", 0);
  assert(__pyx_arg_min); {
    __pyx_v_min = __pyx_PyFloat_AsDouble(__pyx_arg_min); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumIL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_60setCellMinimumIL(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_min));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_60setCellMinimumIL(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setCellMinimumIL", 0);

  /* "meshRefine.pyx":130
 *          return self.thisptr.setCellMinimumP(min)
 *      def setCellMinimumIL(self, double min):
 *          return self.thisptr.setCellMinimumIL(min)             # <<<<<<<<<<<<<<
 *      def setDimension(self, int dim):
 *          return self.thisptr.setDimension(dim)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setCellMinimumIL(__pyx_v_min)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":129
 *      def setCellMinimumP(self, double min):
 *          return self.thisptr.setCellMinimumP(min)
 *      def setCellMinimumIL(self, double min):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setCellMinimumIL(min)
 *      def setDimension(self, int dim):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setCellMinimumIL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":131
 *      def setCellMinimumIL(self, double min):
 *          return self.thisptr.setCellMinimumIL(min)
 *      def setDimension(self, int dim):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDimension(dim)
 *      def setRefinementFactor(self, double rF):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_63setDimension(PyObject *__pyx_v_self, PyObject *__pyx_arg_dim); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_63setDimension(PyObject *__pyx_v_self, PyObject *__pyx_arg_dim) {
  int __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDimension (wrapper)", 0);
  assert(__pyx_arg_dim); {
    __pyx_v_dim = __Pyx_PyInt_As_int(__pyx_arg_dim); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_62setDimension(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_dim));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_62setDimension(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDimension", 0);

  /* "meshRefine.pyx":132
 *          return self.thisptr.setCellMinimumIL(min)
 *      def setDimension(self, int dim):
 *          return self.thisptr.setDimension(dim)             # <<<<<<<<<<<<<<
 *      def setRefinementFactor(self, double rF):
 *          return self.thisptr.setRefinementFactor(rF)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDimension(__pyx_v_dim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":131
 *      def setCellMinimumIL(self, double min):
 *          return self.thisptr.setCellMinimumIL(min)
 *      def setDimension(self, int dim):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDimension(dim)
 *      def setRefinementFactor(self, double rF):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":133
 *      def setDimension(self, int dim):
 *          return self.thisptr.setDimension(dim)
 *      def setRefinementFactor(self, double rF):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementFactor(rF)
 *      def getDimension(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_65setRefinementFactor(PyObject *__pyx_v_self, PyObject *__pyx_arg_rF); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_65setRefinementFactor(PyObject *__pyx_v_self, PyObject *__pyx_arg_rF) {
  double __pyx_v_rF;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementFactor (wrapper)", 0);
  assert(__pyx_arg_rF); {
    __pyx_v_rF = __pyx_PyFloat_AsDouble(__pyx_arg_rF); if (unlikely((__pyx_v_rF == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_64setRefinementFactor(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((double)__pyx_v_rF));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_64setRefinementFactor(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_rF) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementFactor", 0);

  /* "meshRefine.pyx":134
 *          return self.thisptr.setDimension(dim)
 *      def setRefinementFactor(self, double rF):
 *          return self.thisptr.setRefinementFactor(rF)             # <<<<<<<<<<<<<<
 *      def getDimension(self):
 *          return self.thisptr.getDimension()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementFactor(__pyx_v_rF)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":133
 *      def setDimension(self, int dim):
 *          return self.thisptr.setDimension(dim)
 *      def setRefinementFactor(self, double rF):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementFactor(rF)
 *      def getDimension(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementFactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":135
 *      def setRefinementFactor(self, double rF):
 *          return self.thisptr.setRefinementFactor(rF)
 *      def getDimension(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getDimension()
 *      def readSurfaces(self, string filename):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_67getDimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_67getDimension(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDimension (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_66getDimension(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_66getDimension(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getDimension", 0);

  /* "meshRefine.pyx":136
 *          return self.thisptr.setRefinementFactor(rF)
 *      def getDimension(self):
 *          return self.thisptr.getDimension()             # <<<<<<<<<<<<<<
 *      def readSurfaces(self, string filename):
 *          return self.thisptr.readSurfaces(filename)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getDimension()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":135
 *      def setRefinementFactor(self, double rF):
 *          return self.thisptr.setRefinementFactor(rF)
 *      def getDimension(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getDimension()
 *      def readSurfaces(self, string filename):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getDimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":137
 *      def getDimension(self):
 *          return self.thisptr.getDimension()
 *      def readSurfaces(self, string filename):             # <<<<<<<<<<<<<<
 *          return self.thisptr.readSurfaces(filename)
 *      def setSizeMeasure(self, string sM):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_69readSurfaces(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_69readSurfaces(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  std::string __pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readSurfaces (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __pyx_convert_string_from_py_std__in_string(__pyx_arg_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.readSurfaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_68readSurfaces(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((std::string)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_68readSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("readSurfaces", 0);

  /* "meshRefine.pyx":138
 *          return self.thisptr.getDimension()
 *      def readSurfaces(self, string filename):
 *          return self.thisptr.readSurfaces(filename)             # <<<<<<<<<<<<<<
 *      def setSizeMeasure(self, string sM):
 *          return self.thisptr.setSizeMeasure(sM)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->readSurfaces(__pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":137
 *      def getDimension(self):
 *          return self.thisptr.getDimension()
 *      def readSurfaces(self, string filename):             # <<<<<<<<<<<<<<
 *          return self.thisptr.readSurfaces(filename)
 *      def setSizeMeasure(self, string sM):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.readSurfaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":139
 *      def readSurfaces(self, string filename):
 *          return self.thisptr.readSurfaces(filename)
 *      def setSizeMeasure(self, string sM):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setSizeMeasure(sM)
 *      def createSurfaces(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_71setSizeMeasure(PyObject *__pyx_v_self, PyObject *__pyx_arg_sM); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_71setSizeMeasure(PyObject *__pyx_v_self, PyObject *__pyx_arg_sM) {
  std::string __pyx_v_sM;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSizeMeasure (wrapper)", 0);
  assert(__pyx_arg_sM); {
    __pyx_v_sM = __pyx_convert_string_from_py_std__in_string(__pyx_arg_sM); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 139, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setSizeMeasure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_70setSizeMeasure(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((std::string)__pyx_v_sM));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_70setSizeMeasure(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_sM) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setSizeMeasure", 0);

  /* "meshRefine.pyx":140
 *          return self.thisptr.readSurfaces(filename)
 *      def setSizeMeasure(self, string sM):
 *          return self.thisptr.setSizeMeasure(sM)             # <<<<<<<<<<<<<<
 *      def createSurfaces(self):
 *          return self.thisptr.createSurfaces()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setSizeMeasure(__pyx_v_sM)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":139
 *      def readSurfaces(self, string filename):
 *          return self.thisptr.readSurfaces(filename)
 *      def setSizeMeasure(self, string sM):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setSizeMeasure(sM)
 *      def createSurfaces(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setSizeMeasure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":141
 *      def setSizeMeasure(self, string sM):
 *          return self.thisptr.setSizeMeasure(sM)
 *      def createSurfaces(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.createSurfaces()
 *      def journalSurfaces(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_73createSurfaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_73createSurfaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createSurfaces (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_72createSurfaces(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_72createSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createSurfaces", 0);

  /* "meshRefine.pyx":142
 *          return self.thisptr.setSizeMeasure(sM)
 *      def createSurfaces(self):
 *          return self.thisptr.createSurfaces()             # <<<<<<<<<<<<<<
 *      def journalSurfaces(self):
 *          return self.thisptr.journalSurfaces()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->createSurfaces()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":141
 *      def setSizeMeasure(self, string sM):
 *          return self.thisptr.setSizeMeasure(sM)
 *      def createSurfaces(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.createSurfaces()
 *      def journalSurfaces(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.createSurfaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":143
 *      def createSurfaces(self):
 *          return self.thisptr.createSurfaces()
 *      def journalSurfaces(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.journalSurfaces()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_75journalSurfaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_75journalSurfaces(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("journalSurfaces (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_74journalSurfaces(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_74journalSurfaces(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("journalSurfaces", 0);

  /* "meshRefine.pyx":144
 *          return self.thisptr.createSurfaces()
 *      def journalSurfaces(self):
 *          return self.thisptr.journalSurfaces()             # <<<<<<<<<<<<<<
 * 
 *      def setDopingFunction(self, string name, string functionType, string dopingType):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->journalSurfaces()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":143
 *      def createSurfaces(self):
 *          return self.thisptr.createSurfaces()
 *      def journalSurfaces(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.journalSurfaces()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.journalSurfaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":146
 *          return self.thisptr.journalSurfaces()
 * 
 *      def setDopingFunction(self, string name, string functionType, string dopingType):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)
 *      def setXBounds(self, string name, string axis, double min, double max):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_77setDopingFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_77setDopingFunction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  std::string __pyx_v_functionType;
  std::string __pyx_v_dopingType;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDopingFunction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_functionType,&__pyx_n_s_dopingType,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_functionType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingFunction", 1, 3, 3, 1); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dopingType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingFunction", 1, 3, 3, 2); __PYX_ERR(0, 146, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDopingFunction") < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_functionType = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_dopingType = __pyx_convert_string_from_py_std__in_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDopingFunction", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_76setDopingFunction(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_functionType, __pyx_v_dopingType);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_76setDopingFunction(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_functionType, std::string __pyx_v_dopingType) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDopingFunction", 0);

  /* "meshRefine.pyx":147
 * 
 *      def setDopingFunction(self, string name, string functionType, string dopingType):
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)             # <<<<<<<<<<<<<<
 *      def setXBounds(self, string name, string axis, double min, double max):
 *          return self.thisptr.setXBounds(name, axis, min, max)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDopingFunction(__pyx_v_name, __pyx_v_functionType, __pyx_v_dopingType)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":146
 *          return self.thisptr.journalSurfaces()
 * 
 *      def setDopingFunction(self, string name, string functionType, string dopingType):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)
 *      def setXBounds(self, string name, string axis, double min, double max):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingFunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":148
 *      def setDopingFunction(self, string name, string functionType, string dopingType):
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)
 *      def setXBounds(self, string name, string axis, double min, double max):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setXBounds(name, axis, min, max)
 *      def setDopingBounds(self, string name, double min, double max):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_79setXBounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_79setXBounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  std::string __pyx_v_axis;
  double __pyx_v_min;
  double __pyx_v_max;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setXBounds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_axis,&__pyx_n_s_min,&__pyx_n_s_max,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_axis)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setXBounds", 1, 4, 4, 1); __PYX_ERR(0, 148, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setXBounds", 1, 4, 4, 2); __PYX_ERR(0, 148, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setXBounds", 1, 4, 4, 3); __PYX_ERR(0, 148, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setXBounds") < 0)) __PYX_ERR(0, 148, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    __pyx_v_axis = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    __pyx_v_min = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    __pyx_v_max = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setXBounds", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setXBounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_78setXBounds(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_axis, __pyx_v_min, __pyx_v_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_78setXBounds(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_axis, double __pyx_v_min, double __pyx_v_max) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setXBounds", 0);

  /* "meshRefine.pyx":149
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)
 *      def setXBounds(self, string name, string axis, double min, double max):
 *          return self.thisptr.setXBounds(name, axis, min, max)             # <<<<<<<<<<<<<<
 *      def setDopingBounds(self, string name, double min, double max):
 *          return self.thisptr.setDopingBounds(name, min, max)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setXBounds(__pyx_v_name, __pyx_v_axis, __pyx_v_min, __pyx_v_max)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":148
 *      def setDopingFunction(self, string name, string functionType, string dopingType):
 *          return self.thisptr.setDopingFunction(name, functionType, dopingType)
 *      def setXBounds(self, string name, string axis, double min, double max):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setXBounds(name, axis, min, max)
 *      def setDopingBounds(self, string name, double min, double max):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setXBounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":150
 *      def setXBounds(self, string name, string axis, double min, double max):
 *          return self.thisptr.setXBounds(name, axis, min, max)
 *      def setDopingBounds(self, string name, double min, double max):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingBounds(name, min, max)
 *      def setDirection(self, string name, string direction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_81setDopingBounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_81setDopingBounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  double __pyx_v_min;
  double __pyx_v_max;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDopingBounds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_min,&__pyx_n_s_max,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingBounds", 1, 3, 3, 1); __PYX_ERR(0, 150, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingBounds", 1, 3, 3, 2); __PYX_ERR(0, 150, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDopingBounds") < 0)) __PYX_ERR(0, 150, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L3_error)
    __pyx_v_min = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_min == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L3_error)
    __pyx_v_max = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_max == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDopingBounds", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingBounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_80setDopingBounds(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_min, __pyx_v_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_80setDopingBounds(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_min, double __pyx_v_max) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDopingBounds", 0);

  /* "meshRefine.pyx":151
 *          return self.thisptr.setXBounds(name, axis, min, max)
 *      def setDopingBounds(self, string name, double min, double max):
 *          return self.thisptr.setDopingBounds(name, min, max)             # <<<<<<<<<<<<<<
 *      def setDirection(self, string name, string direction):
 *          return self.thisptr.setDirection(name, direction)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDopingBounds(__pyx_v_name, __pyx_v_min, __pyx_v_max)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":150
 *      def setXBounds(self, string name, string axis, double min, double max):
 *          return self.thisptr.setXBounds(name, axis, min, max)
 *      def setDopingBounds(self, string name, double min, double max):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingBounds(name, min, max)
 *      def setDirection(self, string name, string direction):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingBounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":152
 *      def setDopingBounds(self, string name, double min, double max):
 *          return self.thisptr.setDopingBounds(name, min, max)
 *      def setDirection(self, string name, string direction):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDirection(name, direction)
 *      def listFunctions(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_83setDirection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_83setDirection(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  std::string __pyx_v_direction;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDirection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_direction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDirection", 1, 2, 2, 1); __PYX_ERR(0, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDirection") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
    __pyx_v_direction = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDirection", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDirection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_82setDirection(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_direction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_82setDirection(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, std::string __pyx_v_direction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDirection", 0);

  /* "meshRefine.pyx":153
 *          return self.thisptr.setDopingBounds(name, min, max)
 *      def setDirection(self, string name, string direction):
 *          return self.thisptr.setDirection(name, direction)             # <<<<<<<<<<<<<<
 *      def listFunctions(self):
 *          return self.thisptr.listFunctions()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDirection(__pyx_v_name, __pyx_v_direction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":152
 *      def setDopingBounds(self, string name, double min, double max):
 *          return self.thisptr.setDopingBounds(name, min, max)
 *      def setDirection(self, string name, string direction):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDirection(name, direction)
 *      def listFunctions(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDirection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":154
 *      def setDirection(self, string name, string direction):
 *          return self.thisptr.setDirection(name, direction)
 *      def listFunctions(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.listFunctions()
 *      def printXMLDopingFunctions(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_85listFunctions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_85listFunctions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("listFunctions (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_84listFunctions(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_84listFunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("listFunctions", 0);

  /* "meshRefine.pyx":155
 *          return self.thisptr.setDirection(name, direction)
 *      def listFunctions(self):
 *          return self.thisptr.listFunctions()             # <<<<<<<<<<<<<<
 *      def printXMLDopingFunctions(self):
 *          return self.thisptr.printXMLDopingFunctions()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->listFunctions()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":154
 *      def setDirection(self, string name, string direction):
 *          return self.thisptr.setDirection(name, direction)
 *      def listFunctions(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.listFunctions()
 *      def printXMLDopingFunctions(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.listFunctions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":156
 *      def listFunctions(self):
 *          return self.thisptr.listFunctions()
 *      def printXMLDopingFunctions(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printXMLDopingFunctions()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_87printXMLDopingFunctions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_87printXMLDopingFunctions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printXMLDopingFunctions (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_86printXMLDopingFunctions(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_86printXMLDopingFunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("printXMLDopingFunctions", 0);

  /* "meshRefine.pyx":157
 *          return self.thisptr.listFunctions()
 *      def printXMLDopingFunctions(self):
 *          return self.thisptr.printXMLDopingFunctions()             # <<<<<<<<<<<<<<
 * 
 *      def setDopingWidth(self, string name, double xwidth, double ywidth, double zwidth=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->printXMLDopingFunctions()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":156
 *      def listFunctions(self):
 *          return self.thisptr.listFunctions()
 *      def printXMLDopingFunctions(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.printXMLDopingFunctions()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.printXMLDopingFunctions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":159
 *          return self.thisptr.printXMLDopingFunctions()
 * 
 *      def setDopingWidth(self, string name, double xwidth, double ywidth, double zwidth=0):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingWidth(name, xwidth, ywidth, zwidth)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_89setDopingWidth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_89setDopingWidth(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  double __pyx_v_xwidth;
  double __pyx_v_ywidth;
  double __pyx_v_zwidth;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDopingWidth (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_xwidth,&__pyx_n_s_ywidth,&__pyx_n_s_zwidth,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xwidth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingWidth", 0, 3, 4, 1); __PYX_ERR(0, 159, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ywidth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingWidth", 0, 3, 4, 2); __PYX_ERR(0, 159, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zwidth);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDopingWidth") < 0)) __PYX_ERR(0, 159, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
    __pyx_v_xwidth = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_xwidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
    __pyx_v_ywidth = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_ywidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_zwidth = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_zwidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
    } else {
      __pyx_v_zwidth = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDopingWidth", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingWidth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_88setDopingWidth(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_xwidth, __pyx_v_ywidth, __pyx_v_zwidth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_88setDopingWidth(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_xwidth, double __pyx_v_ywidth, double __pyx_v_zwidth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDopingWidth", 0);

  /* "meshRefine.pyx":160
 * 
 *      def setDopingWidth(self, string name, double xwidth, double ywidth, double zwidth=0):
 *          return self.thisptr.setDopingWidth(name, xwidth, ywidth, zwidth)             # <<<<<<<<<<<<<<
 * 
 *      def setDopingLocation(self, string name, double xwidth, double ywidth, double zwidth=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDopingWidth(__pyx_v_name, __pyx_v_xwidth, __pyx_v_ywidth, __pyx_v_zwidth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":159
 *          return self.thisptr.printXMLDopingFunctions()
 * 
 *      def setDopingWidth(self, string name, double xwidth, double ywidth, double zwidth=0):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingWidth(name, xwidth, ywidth, zwidth)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingWidth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":162
 *          return self.thisptr.setDopingWidth(name, xwidth, ywidth, zwidth)
 * 
 *      def setDopingLocation(self, string name, double xwidth, double ywidth, double zwidth=0):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingLocation(name, xwidth, ywidth, zwidth)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_91setDopingLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_91setDopingLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_name;
  double __pyx_v_xwidth;
  double __pyx_v_ywidth;
  double __pyx_v_zwidth;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDopingLocation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_xwidth,&__pyx_n_s_ywidth,&__pyx_n_s_zwidth,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xwidth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingLocation", 0, 3, 4, 1); __PYX_ERR(0, 162, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ywidth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDopingLocation", 0, 3, 4, 2); __PYX_ERR(0, 162, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zwidth);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDopingLocation") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    __pyx_v_xwidth = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_xwidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    __pyx_v_ywidth = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_ywidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_zwidth = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_zwidth == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    } else {
      __pyx_v_zwidth = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDopingLocation", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_90setDopingLocation(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_name, __pyx_v_xwidth, __pyx_v_ywidth, __pyx_v_zwidth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_90setDopingLocation(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, std::string __pyx_v_name, double __pyx_v_xwidth, double __pyx_v_ywidth, double __pyx_v_zwidth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setDopingLocation", 0);

  /* "meshRefine.pyx":163
 * 
 *      def setDopingLocation(self, string name, double xwidth, double ywidth, double zwidth=0):
 *          return self.thisptr.setDopingLocation(name, xwidth, ywidth, zwidth)             # <<<<<<<<<<<<<<
 * 
 *      def addRefineToLine(self, double xmin, double ymin, double xmax, double ymax, double ilThick):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setDopingLocation(__pyx_v_name, __pyx_v_xwidth, __pyx_v_ywidth, __pyx_v_zwidth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":162
 *          return self.thisptr.setDopingWidth(name, xwidth, ywidth, zwidth)
 * 
 *      def setDopingLocation(self, string name, double xwidth, double ywidth, double zwidth=0):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setDopingLocation(name, xwidth, ywidth, zwidth)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setDopingLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":165
 *          return self.thisptr.setDopingLocation(name, xwidth, ywidth, zwidth)
 * 
 *      def addRefineToLine(self, double xmin, double ymin, double xmax, double ymax, double ilThick):             # <<<<<<<<<<<<<<
 *          return self.thisptr.addRefineToLine(xmin, ymin, xmax, ymax, ilThick)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_93addRefineToLine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_93addRefineToLine(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_xmin;
  double __pyx_v_ymin;
  double __pyx_v_xmax;
  double __pyx_v_ymax;
  double __pyx_v_ilThick;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addRefineToLine (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xmin,&__pyx_n_s_ymin,&__pyx_n_s_xmax,&__pyx_n_s_ymax,&__pyx_n_s_ilThick,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xmin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ymin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToLine", 1, 5, 5, 1); __PYX_ERR(0, 165, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToLine", 1, 5, 5, 2); __PYX_ERR(0, 165, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ymax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToLine", 1, 5, 5, 3); __PYX_ERR(0, 165, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ilThick)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToLine", 1, 5, 5, 4); __PYX_ERR(0, 165, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addRefineToLine") < 0)) __PYX_ERR(0, 165, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_xmin = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_xmin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
    __pyx_v_ymin = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_ymin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
    __pyx_v_xmax = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_xmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
    __pyx_v_ymax = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_ymax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
    __pyx_v_ilThick = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_ilThick == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addRefineToLine", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.addRefineToLine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_92addRefineToLine(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_xmin, __pyx_v_ymin, __pyx_v_xmax, __pyx_v_ymax, __pyx_v_ilThick);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_92addRefineToLine(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_ymin, double __pyx_v_xmax, double __pyx_v_ymax, double __pyx_v_ilThick) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("addRefineToLine", 0);

  /* "meshRefine.pyx":166
 * 
 *      def addRefineToLine(self, double xmin, double ymin, double xmax, double ymax, double ilThick):
 *          return self.thisptr.addRefineToLine(xmin, ymin, xmax, ymax, ilThick)             # <<<<<<<<<<<<<<
 * 
 *      def addRefineToSurface(self, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double ilThick):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->addRefineToLine(__pyx_v_xmin, __pyx_v_ymin, __pyx_v_xmax, __pyx_v_ymax, __pyx_v_ilThick)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":165
 *          return self.thisptr.setDopingLocation(name, xwidth, ywidth, zwidth)
 * 
 *      def addRefineToLine(self, double xmin, double ymin, double xmax, double ymax, double ilThick):             # <<<<<<<<<<<<<<
 *          return self.thisptr.addRefineToLine(xmin, ymin, xmax, ymax, ilThick)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.addRefineToLine", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":168
 *          return self.thisptr.addRefineToLine(xmin, ymin, xmax, ymax, ilThick)
 * 
 *      def addRefineToSurface(self, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double ilThick):             # <<<<<<<<<<<<<<
 *          return self.thisptr.addRefineToSurface(x0,  y0,  z0,  x1,  y1,  z1,  x2,  y2,  z2,  x3,  y3,  z3,  ilThick)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_95addRefineToSurface(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_95addRefineToSurface(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  double __pyx_v_z2;
  double __pyx_v_x3;
  double __pyx_v_y3;
  double __pyx_v_z3;
  double __pyx_v_ilThick;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addRefineToSurface (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_z1,&__pyx_n_s_x2,&__pyx_n_s_y2,&__pyx_n_s_z2,&__pyx_n_s_x3,&__pyx_n_s_y3,&__pyx_n_s_z3,&__pyx_n_s_ilThick,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 1); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 2); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 3); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 4); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 5); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 6); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 7); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 8); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 9); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 10); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_z3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 11); __PYX_ERR(0, 168, __pyx_L3_error)
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ilThick)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, 12); __PYX_ERR(0, 168, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addRefineToSurface") < 0)) __PYX_ERR(0, 168, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 13) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_z1 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_z1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_y2 = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_y2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_z2 = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_z2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_x3 = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_x3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_y3 = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_y3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_z3 = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_z3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
    __pyx_v_ilThick = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_ilThick == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addRefineToSurface", 1, 13, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 168, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.addRefineToSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_94addRefineToSurface(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_x3, __pyx_v_y3, __pyx_v_z3, __pyx_v_ilThick);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_94addRefineToSurface(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2, double __pyx_v_x3, double __pyx_v_y3, double __pyx_v_z3, double __pyx_v_ilThick) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("addRefineToSurface", 0);

  /* "meshRefine.pyx":169
 * 
 *      def addRefineToSurface(self, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double ilThick):
 *          return self.thisptr.addRefineToSurface(x0,  y0,  z0,  x1,  y1,  z1,  x2,  y2,  z2,  x3,  y3,  z3,  ilThick)             # <<<<<<<<<<<<<<
 * 
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->addRefineToSurface(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_x3, __pyx_v_y3, __pyx_v_z3, __pyx_v_ilThick)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":168
 *          return self.thisptr.addRefineToLine(xmin, ymin, xmax, ymax, ilThick)
 * 
 *      def addRefineToSurface(self, double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double ilThick):             # <<<<<<<<<<<<<<
 *          return self.thisptr.addRefineToSurface(x0,  y0,  z0,  x1,  y1,  z1,  x2,  y2,  z2,  x3,  y3,  z3,  ilThick)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.addRefineToSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":171
 *          return self.thisptr.addRefineToSurface(x0,  y0,  z0,  x1,  y1,  z1,  x2,  y2,  z2,  x3,  y3,  z3,  ilThick)
 * 
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)
 *      def setMaxSurfaceRecursions(self, int level):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_97setRefinementBoundingBox(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_97setRefinementBoundingBox(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_xmin;
  double __pyx_v_ymin;
  double __pyx_v_zmin;
  double __pyx_v_xmax;
  double __pyx_v_ymax;
  double __pyx_v_zmax;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setRefinementBoundingBox (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xmin,&__pyx_n_s_ymin,&__pyx_n_s_zmin,&__pyx_n_s_xmax,&__pyx_n_s_ymax,&__pyx_n_s_zmax,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xmin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ymin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, 1); __PYX_ERR(0, 171, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zmin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, 2); __PYX_ERR(0, 171, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, 3); __PYX_ERR(0, 171, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ymax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, 4); __PYX_ERR(0, 171, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_zmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, 5); __PYX_ERR(0, 171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setRefinementBoundingBox") < 0)) __PYX_ERR(0, 171, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_xmin = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_xmin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
    __pyx_v_ymin = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_ymin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
    __pyx_v_zmin = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_zmin == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
    __pyx_v_xmax = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_xmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
    __pyx_v_ymax = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_ymax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
    __pyx_v_zmax = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_zmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setRefinementBoundingBox", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementBoundingBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_96setRefinementBoundingBox(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), __pyx_v_xmin, __pyx_v_ymin, __pyx_v_zmin, __pyx_v_xmax, __pyx_v_ymax, __pyx_v_zmax);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_96setRefinementBoundingBox(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_ymin, double __pyx_v_zmin, double __pyx_v_xmax, double __pyx_v_ymax, double __pyx_v_zmax) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setRefinementBoundingBox", 0);

  /* "meshRefine.pyx":172
 * 
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)             # <<<<<<<<<<<<<<
 *      def setMaxSurfaceRecursions(self, int level):
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setRefinementBoundingBox(__pyx_v_xmin, __pyx_v_ymin, __pyx_v_zmin, __pyx_v_xmax, __pyx_v_ymax, __pyx_v_zmax)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":171
 *          return self.thisptr.addRefineToSurface(x0,  y0,  z0,  x1,  y1,  z1,  x2,  y2,  z2,  x3,  y3,  z3,  ilThick)
 * 
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)
 *      def setMaxSurfaceRecursions(self, int level):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setRefinementBoundingBox", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":173
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)
 *      def setMaxSurfaceRecursions(self, int level):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 *      def setGuaranteedSurfaceRecursions(self, int level):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_99setMaxSurfaceRecursions(PyObject *__pyx_v_self, PyObject *__pyx_arg_level); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_99setMaxSurfaceRecursions(PyObject *__pyx_v_self, PyObject *__pyx_arg_level) {
  int __pyx_v_level;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMaxSurfaceRecursions (wrapper)", 0);
  assert(__pyx_arg_level); {
    __pyx_v_level = __Pyx_PyInt_As_int(__pyx_arg_level); if (unlikely((__pyx_v_level == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setMaxSurfaceRecursions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_98setMaxSurfaceRecursions(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_98setMaxSurfaceRecursions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setMaxSurfaceRecursions", 0);

  /* "meshRefine.pyx":174
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)
 *      def setMaxSurfaceRecursions(self, int level):
 *          return self.thisptr.setMaxSurfaceRecursions(level)             # <<<<<<<<<<<<<<
 *      def setGuaranteedSurfaceRecursions(self, int level):
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setMaxSurfaceRecursions(__pyx_v_level)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":173
 *      def setRefinementBoundingBox(self, double xmin, double ymin, double zmin, double xmax, double ymax, double zmax):
 *          return self.thisptr.setRefinementBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax)
 *      def setMaxSurfaceRecursions(self, int level):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 *      def setGuaranteedSurfaceRecursions(self, int level):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setMaxSurfaceRecursions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":175
 *      def setMaxSurfaceRecursions(self, int level):
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 *      def setGuaranteedSurfaceRecursions(self, int level):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 *      def setWriteJunctions(self, bool setJunctions):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_101setGuaranteedSurfaceRecursions(PyObject *__pyx_v_self, PyObject *__pyx_arg_level); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_101setGuaranteedSurfaceRecursions(PyObject *__pyx_v_self, PyObject *__pyx_arg_level) {
  int __pyx_v_level;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setGuaranteedSurfaceRecursions (wrapper)", 0);
  assert(__pyx_arg_level); {
    __pyx_v_level = __Pyx_PyInt_As_int(__pyx_arg_level); if (unlikely((__pyx_v_level == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setGuaranteedSurfaceRecursions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_100setGuaranteedSurfaceRecursions(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_100setGuaranteedSurfaceRecursions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setGuaranteedSurfaceRecursions", 0);

  /* "meshRefine.pyx":176
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 *      def setGuaranteedSurfaceRecursions(self, int level):
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)             # <<<<<<<<<<<<<<
 *      def setWriteJunctions(self, bool setJunctions):
 *          return self.thisptr.setWriteJunctions(setJunctions)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setGuaranteedSurfaceRecursions(__pyx_v_level)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":175
 *      def setMaxSurfaceRecursions(self, int level):
 *          return self.thisptr.setMaxSurfaceRecursions(level)
 *      def setGuaranteedSurfaceRecursions(self, int level):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 *      def setWriteJunctions(self, bool setJunctions):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setGuaranteedSurfaceRecursions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":177
 *      def setGuaranteedSurfaceRecursions(self, int level):
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 *      def setWriteJunctions(self, bool setJunctions):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setWriteJunctions(setJunctions)
 *      def setTetNum(self, int tn):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_103setWriteJunctions(PyObject *__pyx_v_self, PyObject *__pyx_arg_setJunctions); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_103setWriteJunctions(PyObject *__pyx_v_self, PyObject *__pyx_arg_setJunctions) {
  bool __pyx_v_setJunctions;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setWriteJunctions (wrapper)", 0);
  assert(__pyx_arg_setJunctions); {
    __pyx_v_setJunctions = __Pyx_PyObject_IsTrue(__pyx_arg_setJunctions); if (unlikely((__pyx_v_setJunctions == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setWriteJunctions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_102setWriteJunctions(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((bool)__pyx_v_setJunctions));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_102setWriteJunctions(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, bool __pyx_v_setJunctions) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setWriteJunctions", 0);

  /* "meshRefine.pyx":178
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 *      def setWriteJunctions(self, bool setJunctions):
 *          return self.thisptr.setWriteJunctions(setJunctions)             # <<<<<<<<<<<<<<
 *      def setTetNum(self, int tn):
 *          return self.thisptr.setTetNum(tn)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setWriteJunctions(__pyx_v_setJunctions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":177
 *      def setGuaranteedSurfaceRecursions(self, int level):
 *          return self.thisptr.setGuaranteedSurfaceRecursions(level)
 *      def setWriteJunctions(self, bool setJunctions):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setWriteJunctions(setJunctions)
 *      def setTetNum(self, int tn):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setWriteJunctions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":179
 *      def setWriteJunctions(self, bool setJunctions):
 *          return self.thisptr.setWriteJunctions(setJunctions)
 *      def setTetNum(self, int tn):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setTetNum(tn)
 *      def getTetNum(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_105setTetNum(PyObject *__pyx_v_self, PyObject *__pyx_arg_tn); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_105setTetNum(PyObject *__pyx_v_self, PyObject *__pyx_arg_tn) {
  int __pyx_v_tn;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTetNum (wrapper)", 0);
  assert(__pyx_arg_tn); {
    __pyx_v_tn = __Pyx_PyInt_As_int(__pyx_arg_tn); if (unlikely((__pyx_v_tn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setTetNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_104setTetNum(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self), ((int)__pyx_v_tn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_104setTetNum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self, int __pyx_v_tn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setTetNum", 0);

  /* "meshRefine.pyx":180
 *          return self.thisptr.setWriteJunctions(setJunctions)
 *      def setTetNum(self, int tn):
 *          return self.thisptr.setTetNum(tn)             # <<<<<<<<<<<<<<
 *      def getTetNum(self):
 *          return self.thisptr.getTetNum()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr->setTetNum(__pyx_v_tn)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":179
 *      def setWriteJunctions(self, bool setJunctions):
 *          return self.thisptr.setWriteJunctions(setJunctions)
 *      def setTetNum(self, int tn):             # <<<<<<<<<<<<<<
 *          return self.thisptr.setTetNum(tn)
 *      def getTetNum(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.setTetNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "meshRefine.pyx":181
 *      def setTetNum(self, int tn):
 *          return self.thisptr.setTetNum(tn)
 *      def getTetNum(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getTetNum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_107getTetNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10meshRefine_12PyMeshRefine_107getTetNum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTetNum (wrapper)", 0);
  __pyx_r = __pyx_pf_10meshRefine_12PyMeshRefine_106getTetNum(((struct __pyx_obj_10meshRefine_PyMeshRefine *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10meshRefine_12PyMeshRefine_106getTetNum(struct __pyx_obj_10meshRefine_PyMeshRefine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getTetNum", 0);

  /* "meshRefine.pyx":182
 *          return self.thisptr.setTetNum(tn)
 *      def getTetNum(self):
 *          return self.thisptr.getTetNum()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->getTetNum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "meshRefine.pyx":181
 *      def setTetNum(self, int tn):
 *          return self.thisptr.setTetNum(tn)
 *      def getTetNum(self):             # <<<<<<<<<<<<<<
 *          return self.thisptr.getTetNum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("meshRefine.PyMeshRefine.getTetNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10meshRefine_PyMeshRefine(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10meshRefine_12PyMeshRefine_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10meshRefine_PyMeshRefine(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10meshRefine_12PyMeshRefine_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10meshRefine_PyMeshRefine[] = {
  {"fillCoordinates", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_5fillCoordinates, METH_O, 0},
  {"helloWorld", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_7helloWorld, METH_NOARGS, 0},
  {"init", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_9init, METH_O, 0},
  {"printSurfs", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_11printSurfs, METH_NOARGS, 0},
  {"testX", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_13testX, METH_O, 0},
  {"printTestX", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_15printTestX, METH_O, 0},
  {"sizeCellNodes", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_17sizeCellNodes, METH_O, 0},
  {"resetNodeCounter", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_19resetNodeCounter, METH_NOARGS, 0},
  {"printCoords", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_21printCoords, METH_NOARGS, 0},
  {"freeCoords", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_23freeCoords, METH_NOARGS, 0},
  {"setRefinementDistance", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_25setRefinementDistance, METH_O, 0},
  {"setRefinementDistanceN", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_27setRefinementDistanceN, METH_O, 0},
  {"setRefinementDistanceP", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_29setRefinementDistanceP, METH_O, 0},
  {"setRefinementDistanceIL", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_31setRefinementDistanceIL, METH_O, 0},
  {"getRefinementDistance", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_33getRefinementDistance, METH_NOARGS, 0},
  {"doIRefine", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_35doIRefine, METH_NOARGS, 0},
  {"doIrefineXplane", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_37doIrefineXplane, METH_O, 0},
  {"doIrefineCentroid", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_39doIrefineCentroid, METH_NOARGS, 0},
  {"doIrefineCentroidSided", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_41doIrefineCentroidSided, METH_NOARGS, 0},
  {"doIrefine3D", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_43doIrefine3D, METH_NOARGS, 0},
  {"doIrefine2D", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_45doIrefine2D, METH_NOARGS, 0},
  {"doIrefineCentroidSidedFinishMetric", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_47doIrefineCentroidSidedFinishMetric, METH_NOARGS, 0},
  {"getNumSurfs", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_49getNumSurfs, METH_NOARGS, 0},
  {"getMaxSide", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_51getMaxSide, METH_NOARGS, 0},
  {"getMinSide", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_53getMinSide, METH_NOARGS, 0},
  {"setCellMinimum", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_55setCellMinimum, METH_O, 0},
  {"setCellMinimumN", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_57setCellMinimumN, METH_O, 0},
  {"setCellMinimumP", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_59setCellMinimumP, METH_O, 0},
  {"setCellMinimumIL", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_61setCellMinimumIL, METH_O, 0},
  {"setDimension", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_63setDimension, METH_O, 0},
  {"setRefinementFactor", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_65setRefinementFactor, METH_O, 0},
  {"getDimension", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_67getDimension, METH_NOARGS, 0},
  {"readSurfaces", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_69readSurfaces, METH_O, 0},
  {"setSizeMeasure", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_71setSizeMeasure, METH_O, 0},
  {"createSurfaces", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_73createSurfaces, METH_NOARGS, 0},
  {"journalSurfaces", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_75journalSurfaces, METH_NOARGS, 0},
  {"setDopingFunction", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_77setDopingFunction, METH_VARARGS|METH_KEYWORDS, 0},
  {"setXBounds", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_79setXBounds, METH_VARARGS|METH_KEYWORDS, 0},
  {"setDopingBounds", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_81setDopingBounds, METH_VARARGS|METH_KEYWORDS, 0},
  {"setDirection", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_83setDirection, METH_VARARGS|METH_KEYWORDS, 0},
  {"listFunctions", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_85listFunctions, METH_NOARGS, 0},
  {"printXMLDopingFunctions", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_87printXMLDopingFunctions, METH_NOARGS, 0},
  {"setDopingWidth", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_89setDopingWidth, METH_VARARGS|METH_KEYWORDS, 0},
  {"setDopingLocation", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_91setDopingLocation, METH_VARARGS|METH_KEYWORDS, 0},
  {"addRefineToLine", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_93addRefineToLine, METH_VARARGS|METH_KEYWORDS, 0},
  {"addRefineToSurface", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_95addRefineToSurface, METH_VARARGS|METH_KEYWORDS, 0},
  {"setRefinementBoundingBox", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_97setRefinementBoundingBox, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMaxSurfaceRecursions", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_99setMaxSurfaceRecursions, METH_O, 0},
  {"setGuaranteedSurfaceRecursions", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_101setGuaranteedSurfaceRecursions, METH_O, 0},
  {"setWriteJunctions", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_103setWriteJunctions, METH_O, 0},
  {"setTetNum", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_105setTetNum, METH_O, 0},
  {"getTetNum", (PyCFunction)__pyx_pw_10meshRefine_12PyMeshRefine_107getTetNum, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10meshRefine_PyMeshRefine = {
  PyVarObject_HEAD_INIT(0, 0)
  "meshRefine.PyMeshRefine", /*tp_name*/
  sizeof(struct __pyx_obj_10meshRefine_PyMeshRefine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10meshRefine_PyMeshRefine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10meshRefine_PyMeshRefine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10meshRefine_PyMeshRefine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "meshRefine",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_dopingType, __pyx_k_dopingType, sizeof(__pyx_k_dopingType), 0, 0, 1, 1},
  {&__pyx_n_s_functionType, __pyx_k_functionType, sizeof(__pyx_k_functionType), 0, 0, 1, 1},
  {&__pyx_n_s_ilThick, __pyx_k_ilThick, sizeof(__pyx_k_ilThick), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_x3, __pyx_k_x3, sizeof(__pyx_k_x3), 0, 0, 1, 1},
  {&__pyx_n_s_xmax, __pyx_k_xmax, sizeof(__pyx_k_xmax), 0, 0, 1, 1},
  {&__pyx_n_s_xmin, __pyx_k_xmin, sizeof(__pyx_k_xmin), 0, 0, 1, 1},
  {&__pyx_n_s_xwidth, __pyx_k_xwidth, sizeof(__pyx_k_xwidth), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_y3, __pyx_k_y3, sizeof(__pyx_k_y3), 0, 0, 1, 1},
  {&__pyx_n_s_ymax, __pyx_k_ymax, sizeof(__pyx_k_ymax), 0, 0, 1, 1},
  {&__pyx_n_s_ymin, __pyx_k_ymin, sizeof(__pyx_k_ymin), 0, 0, 1, 1},
  {&__pyx_n_s_ywidth, __pyx_k_ywidth, sizeof(__pyx_k_ywidth), 0, 0, 1, 1},
  {&__pyx_n_s_z0, __pyx_k_z0, sizeof(__pyx_k_z0), 0, 0, 1, 1},
  {&__pyx_n_s_z1, __pyx_k_z1, sizeof(__pyx_k_z1), 0, 0, 1, 1},
  {&__pyx_n_s_z2, __pyx_k_z2, sizeof(__pyx_k_z2), 0, 0, 1, 1},
  {&__pyx_n_s_z3, __pyx_k_z3, sizeof(__pyx_k_z3), 0, 0, 1, 1},
  {&__pyx_n_s_zmax, __pyx_k_zmax, sizeof(__pyx_k_zmax), 0, 0, 1, 1},
  {&__pyx_n_s_zmin, __pyx_k_zmin, sizeof(__pyx_k_zmin), 0, 0, 1, 1},
  {&__pyx_n_s_zwidth, __pyx_k_zwidth, sizeof(__pyx_k_zwidth), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initmeshRefine(void); /*proto*/
PyMODINIT_FUNC initmeshRefine(void)
#else
PyMODINIT_FUNC PyInit_meshRefine(void); /*proto*/
PyMODINIT_FUNC PyInit_meshRefine(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_meshRefine(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("meshRefine", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_meshRefine) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "meshRefine")) {
      if (unlikely(PyDict_SetItemString(modules, "meshRefine", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10meshRefine_PyMeshRefine) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_type_10meshRefine_PyMeshRefine.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyMeshRefine", (PyObject *)&__pyx_type_10meshRefine_PyMeshRefine) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_ptype_10meshRefine_PyMeshRefine = &__pyx_type_10meshRefine_PyMeshRefine;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "meshRefine.pyx":1
 * #from meshRefine cimport fillCoordinates             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init meshRefine", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init meshRefine");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
