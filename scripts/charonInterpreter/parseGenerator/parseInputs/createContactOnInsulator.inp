

interpreter name ContactOnInsulator

interpreter inputLine (BC is contact on insulator for) {sidesetID} on {geometryBlock} with work function {workFunction} [(fixed at) {potential}[ (swept from) {potential1} to {potential2} [ (linearly ramped) from {time0} to {time1} and voltage from {voltage0} to {voltage1}[ (trapezoid pulse) with amplitude = {amplitude} period = {period} rise time = {risetime} fall time = {falltime} [(duty cycle) = {dutycycle} [(dc offset) = {DCoffset} [(delay) = {delay} [(repeat) = {repeat}]]]]]]]]

interpreter shortHelp {Specify the potential on a contact}

interpreter longHelp {Specify the potential on a contact. <> sidesetID is the contact name/type <> geometryBlock is the geometry name the contact is attached to <> potential is the value in volts}

xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS,Type,string,Dirichlet
xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS,Sideset ID,string,{sidesetID}
xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS,Element Block ID,string,{geometryBlock}
xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS,Equation Set Name,string,ELECTRIC_POTENTIAL
xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS,Strategy,string,Contact On Insulator
xmlRequired Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data,Work Function,double,{workFunction}

xmlOptional (fixed at) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data,Voltage,double,{potential}

xmlOptional (linearly ramped) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Linear Ramp,Initial Time,double,{time0}
xmlOptional (linearly ramped) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Linear Ramp,Final Time,double,{time1}
xmlOptional (linearly ramped) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Linear Ramp,Initial Voltage,double,{voltage0}
xmlOptional (linearly ramped) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Linear Ramp,Final Voltage,double,{voltage1}

xmlOptional (trapezoid pulse) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Amplitude,double,{amplitude}
xmlOptional (trapezoid pulse) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Period,double,{period}
xmlOptional (trapezoid pulse) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Rise Time,double,{risetime}
xmlOptional (trapezoid pulse) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Fall Time,double,{falltime}
xmlOptional (duty cycle) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Duty Cycle,double,{dutycycle}
xmlOptional (dc offset) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,DC Offset,double,{DCoffset}
xmlOptional (delay) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Delay,double,{delay}
xmlOptional (repeat) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data->Trapezoid Pulse,Number Pulses,int,{repeat}

# Set the data parameter to a string
xmlOptional (swept from) Charon->Boundary Conditions->{sidesetID}ANONYMOUS->Data,Varying Voltage,string,Parameter

# Modify the solver type from NOX to LOCA
xmlOptional (swept from) Charon->Solution Control,Piro Solver,string,LOCA

#LOCA Parameters
xmlOptional (swept from) Charon->Solution Control->LOCA->Predictor,Method,string,Constant
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Initial Value,double,{potential1}
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Continuation Parameter,string,Varying Voltage
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Max Steps,int,1000
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Max Value,double,{potential2}
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Min Value,double,{potential1}
xmlOptional (swept from) Charon->Solution Control->LOCA->Stepper,Compute Eigenvalues,bool,0
xmlOptional (swept from) Charon->Solution Control->LOCA->Step Size,Initial Step Size,double,1.0

# Set the parameters block
xmlOptional (swept from) Charon->Active Parameters,Number of Parameter Vectors,int,1
xmlOptional (swept from) Charon->Active Parameters->Parameter Vector 0,Number,int,1
xmlOptional (swept from) Charon->Active Parameters->Parameter Vector 0,Parameter 0,string,Varying Voltage
xmlOptional (swept from) Charon->Active Parameters->Parameter Vector 0,Initial Value 0,double,{potential1}
xmlOptional (swept from) use Modifier 0

